// Package endoflife provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package endoflife

import (
	"encoding/json"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// FullProductListResponse A response containing a list of products (full).
type FullProductListResponse struct {
	// Result The products.
	Result []ProductDetails `json:"result"`

	// SchemaVersion Version of this schema.
	SchemaVersion string `json:"schema_version"`

	// Total Number of products in the list.
	Total int32 `json:"total"`
}

// Identifier A product identifier, such as a purl, repology or cpe identifier.
type Identifier struct {
	// Id Identifier.
	Id string `json:"id"`

	// Type Type of the identifier.
	Type string `json:"type"`
}

// IdentifierListResponse A response containing all identifiers for a given type.
type IdentifierListResponse struct {
	// Result The identifiers.
	Result []struct {
		// Identifier The identifier.
		Identifier string `json:"identifier"`

		// Product A link to a resource.
		Product Uri `json:"product"`
	} `json:"result"`

	// SchemaVersion Version of this schema.
	SchemaVersion string `json:"schema_version"`

	// Total Number of identifiers in the list.
	Total int32 `json:"total"`
}

// ProductDetails Full details of a product.
type ProductDetails struct {
	// Aliases Aliases declared for the product (derived from alternate_urls).
	// The array is empty when no alias is declared.
	Aliases []string `json:"aliases"`

	// Category Category of the product.
	Category string `json:"category"`

	// Identifiers Known identifiers (purl, repology, cpe...) associated to the product.
	// The array is empty when no identifier is declared.
	Identifiers []Identifier `json:"identifiers"`

	// Label Label of the product.
	Label string `json:"label"`

	// Labels Product labels.
	Labels struct {
		// Discontinued Label used to denote the discontinuation of the product.
		// This field is mainly used for hardware, it is always null for software.
		Discontinued *string `json:"discontinued"`

		// Eoas Label used to denote the phase before the end of active support of the product.
		// This field is null when the product does not have an active support phase.
		Eoas *string `json:"eoas"`

		// Eoes Label used to denote the phase before the end of extended support of the product.
		// This field is null when the product does not have an extended support phase.
		Eoes *string `json:"eoes"`

		// Eol Label used to denote the phase before the end of life of the product.
		Eol string `json:"eol"`
	} `json:"labels"`

	// Links Product links.
	Links struct {
		// Html Link to the product page on endoflife.date.
		Html string `json:"html"`

		// Icon Link to the product icon on https://simpleicons.org.
		// This field is null when the product does not have an icon on simpleicons.org.
		Icon *string `json:"icon"`

		// ReleasePolicy Link to the product release policy.
		// This field is null when the product does not have a publicly available release policy.
		ReleasePolicy *string `json:"releasePolicy"`
	} `json:"links"`

	// Name Name of the product.
	Name string `json:"name"`

	// Releases A list of all product releases.
	Releases []ProductRelease `json:"releases"`

	// Tags Tags associated to the product.
	// Given the category is also a tag, the array will always contain at least one tag.
	Tags []string `json:"tags"`

	// VersionCommand Command that can be used to check the current product version.
	// This field is null when the command is not known.
	VersionCommand *string `json:"versionCommand"`
}

// ProductListResponse A response containing a list of products (summary).
type ProductListResponse struct {
	// Result The products.
	Result []ProductSummary `json:"result"`

	// SchemaVersion Version of this schema.
	SchemaVersion string `json:"schema_version"`

	// Total Number of products in the list.
	Total int32 `json:"total"`
}

// ProductRelease Full information about a product release cycle.
type ProductRelease struct {
	// Codename Codename of the product release cycle.
	// This field is null when the release cycle does not have a codename, or when the information is not known.
	Codename *string `json:"codename"`

	// Custom Custom fields for the product release cycle.
	// This field is null when the product does not declare at least one custom fields.
	Custom *ProductRelease_Custom `json:"custom,omitempty"`

	// DiscontinuedFrom Discontinuation date for the release cycle.
	// This field is mainly used for hardware, it is not provided when not applicable. It is null when the date is not known.
	DiscontinuedFrom *openapi_types.Date `json:"discontinuedFrom"`

	// EoasFrom End of active support date for the release cycle.
	// This field is not provided when the product does not have an active support phase. It is null when the date is not known.
	EoasFrom *openapi_types.Date `json:"eoasFrom"`

	// EoesFrom End of extended support date for the release cycle.
	// This field is not provided when the product does not have an extended support phase. It is null when the release cycle is not eligible for extended support or when the date is not known.
	EoesFrom *openapi_types.Date `json:"eoesFrom"`

	// EolFrom End of life date for the release cycle.
	// This field is null when the date is not known.
	EolFrom *openapi_types.Date `json:"eolFrom"`

	// IsDiscontinued Whether the release cycle is discontinued.
	// This field is mainly used for hardware, it is not provided when not applicable.
	IsDiscontinued *bool `json:"isDiscontinued,omitempty"`

	// IsEoas Whether the active support phase is over for the release cycle.
	// This field is not provided when the product does not have an active support phase.
	IsEoas *bool `json:"isEoas,omitempty"`

	// IsEoes Whether the extended support phase is over for the release cycle.
	// This field is not provided when the product does not have an extended support phase. This field is null when the release cycle is not eligible for extended support.
	IsEoes *string `json:"isEoes"`

	// IsEol Whether the release cycle is EOL.
	IsEol bool `json:"isEol"`

	// IsLts Whether the product release cycle receives long-term support (LTS).
	IsLts bool `json:"isLts"`

	// IsMaintained Whether this release cycle still have some level of support.
	// This can be any level of support, even extended support.
	IsMaintained bool `json:"isMaintained"`

	// Label Label of the product release cycle.
	Label string `json:"label"`

	// Latest Latest version for this release cycle.
	// This field is null when this release cycle does not have a latest version documented.
	Latest ProductRelease_Latest `json:"latest"`

	// LtsFrom Start date of the LTS phase for the release cycle.
	// This field is null when the isLts field is set to false, when the LTS phase does not start later than the release date, or when the date is not known.
	LtsFrom *openapi_types.Date `json:"ltsFrom"`

	// Name Name of the product release cycle.
	Name string `json:"name"`

	// ReleaseDate Release date of the release cycle.
	ReleaseDate openapi_types.Date `json:"releaseDate"`
}

// ProductReleaseCustom1 defines model for .
type ProductReleaseCustom1 = interface{}

// ProductRelease_Custom Custom fields for the product release cycle.
// This field is null when the product does not declare at least one custom fields.
type ProductRelease_Custom struct {
	union json.RawMessage
}

// ProductReleaseLatest1 defines model for .
type ProductReleaseLatest1 = interface{}

// ProductRelease_Latest Latest version for this release cycle.
// This field is null when this release cycle does not have a latest version documented.
type ProductRelease_Latest struct {
	union json.RawMessage
}

// ProductReleaseResponse A response containing a release cycle.
type ProductReleaseResponse struct {
	// Result Full information about a product release cycle.
	Result ProductRelease `json:"result"`

	// SchemaVersion Version of this schema.
	SchemaVersion string `json:"schema_version"`
}

// ProductResponse A response containing a product.
type ProductResponse struct {
	// LastModified The time this product was last modified.
	LastModified time.Time `json:"last_modified"`

	// Result Full details of a product.
	Result ProductDetails `json:"result"`

	// SchemaVersion Version of this schema.
	SchemaVersion string `json:"schema_version"`
}

// ProductSummary Summary of a product.
type ProductSummary struct {
	// Aliases Aliases declared for the product (derived from alternate_urls).
	// The array is empty when no alias is declared.
	Aliases []string `json:"aliases"`

	// Category Category of the product.
	Category string `json:"category"`

	// Label Label of the product.
	Label string `json:"label"`

	// Name Name of the product.
	Name string `json:"name"`

	// Tags Tags associated to the product.
	// Given the category is also a tag, the array will always contain at least one tag.
	Tags []string `json:"tags"`

	// Uri Link to the full product details.
	Uri string `json:"uri"`
}

// ProductVersion Information about a product version.
type ProductVersion struct {
	// Date Release date of the version.
	// This field is null when the information is not known.
	Date *openapi_types.Date `json:"date"`

	// Link Link to the changelog or release notes.
	// This field is null when there is no public link available, or when the information is not known.
	Link *string `json:"link"`

	// Name Name of the version.
	Name string `json:"name"`
}

// UnknownProperties Group properties with name not know in advance, such as custom properties.
type UnknownProperties map[string]*string

// Uri A link to a resource.
type Uri struct {
	// Name Name of the URI.
	Name string `json:"name"`

	// Uri URI.
	Uri string `json:"uri"`
}

// UriListResponse A response containing a list of URIs.
type UriListResponse struct {
	// Result The URIs.
	Result []Uri `json:"result"`

	// SchemaVersion Version of this schema.
	SchemaVersion string `json:"schema_version"`

	// Total Number of URIs in the list.
	Total int32 `json:"total"`
}

// AsUnknownProperties returns the union data inside the ProductRelease_Custom as a UnknownProperties
func (t ProductRelease_Custom) AsUnknownProperties() (UnknownProperties, error) {
	var body UnknownProperties
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnknownProperties overwrites any union data inside the ProductRelease_Custom as the provided UnknownProperties
func (t *ProductRelease_Custom) FromUnknownProperties(v UnknownProperties) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnknownProperties performs a merge with any union data inside the ProductRelease_Custom, using the provided UnknownProperties
func (t *ProductRelease_Custom) MergeUnknownProperties(v UnknownProperties) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsProductReleaseCustom1 returns the union data inside the ProductRelease_Custom as a ProductReleaseCustom1
func (t ProductRelease_Custom) AsProductReleaseCustom1() (ProductReleaseCustom1, error) {
	var body ProductReleaseCustom1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProductReleaseCustom1 overwrites any union data inside the ProductRelease_Custom as the provided ProductReleaseCustom1
func (t *ProductRelease_Custom) FromProductReleaseCustom1(v ProductReleaseCustom1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProductReleaseCustom1 performs a merge with any union data inside the ProductRelease_Custom, using the provided ProductReleaseCustom1
func (t *ProductRelease_Custom) MergeProductReleaseCustom1(v ProductReleaseCustom1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ProductRelease_Custom) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ProductRelease_Custom) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsProductVersion returns the union data inside the ProductRelease_Latest as a ProductVersion
func (t ProductRelease_Latest) AsProductVersion() (ProductVersion, error) {
	var body ProductVersion
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProductVersion overwrites any union data inside the ProductRelease_Latest as the provided ProductVersion
func (t *ProductRelease_Latest) FromProductVersion(v ProductVersion) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProductVersion performs a merge with any union data inside the ProductRelease_Latest, using the provided ProductVersion
func (t *ProductRelease_Latest) MergeProductVersion(v ProductVersion) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsProductReleaseLatest1 returns the union data inside the ProductRelease_Latest as a ProductReleaseLatest1
func (t ProductRelease_Latest) AsProductReleaseLatest1() (ProductReleaseLatest1, error) {
	var body ProductReleaseLatest1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProductReleaseLatest1 overwrites any union data inside the ProductRelease_Latest as the provided ProductReleaseLatest1
func (t *ProductRelease_Latest) FromProductReleaseLatest1(v ProductReleaseLatest1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProductReleaseLatest1 performs a merge with any union data inside the ProductRelease_Latest, using the provided ProductReleaseLatest1
func (t *ProductRelease_Latest) MergeProductReleaseLatest1(v ProductReleaseLatest1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ProductRelease_Latest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ProductRelease_Latest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
